DispatcherServerlet:
	
Spring AOP使用的动态代理（相比静态代理（AspectJ）不会修改字节码），而是在内存中临时为方法生成一个AOP对象。

两种动态代理的方式：
	-JDK动态代理：InvocationHandler接口和Proxy类

	-CGLIB（Code Generation Library）动态代理：如果目标类没有实现接口，Spring Aop会选择使用CGLIB来
		动态代理目标类。
		CGLIB: 代码生成类库，可以在运行时动态生成某个类的子类（CGLIB是通过继承的方式做动态代理），如果
			某个类被标记为final，就无法使用CGLIB。	

AOP concepts：
	-Aspect： a modularization of  a concern that cuts across multiple classes.
		In Spring AOP,aspects are implemented using regular classes or regular classes annotated
	with the @Aspect annotation .
	-Joint point: In Spring AOP,a join point always represents a method execution;
	-Advice: action taken by an aspect at a particular join point.
	-Pointcut: a predicate that matches join points;
	-Introduction: declaring additonal methods or fields on behalf of a type;
	-Target object: object being advised by one or more aspects.Since Spring AOP is implemented using
		runtime proxies,this object will always be a proxied object;
	-AOP proxy: an object created by the AOP framework in order to implement the aspect contracts.In the
		Spring Framework,an AOP proxy will be a JDK dynamic proxy or CGLIB proxy;
	-Weaving: linking aspects with other application types or objects to create advised object;
		***This is can be done at compile time (using  the AspectJ compiler for example),
		*** Spring Aop ,like other pure Java AOP frameworks,performs weaving at runtime;

Types of advice:
	-Before advice:
	-After returning advice：After returning advice runs when a matched method execution returns normally
	-After throwing advice:After throwing advice runs when a matched method execution exits by throwing an exception.
	-After(finally advice:
	-Around advice:
A Pointcut:
	two parts:
		-a signature comprising a name and any parameters.(the method serving as the pointcut signature must have a void return type)
		-a pointcut expression that determines exactly which methods executions we are interested in.
	Supported Poincut Designators:
		-execution: for matching method execution join points.
		-within : limits matching to join points within certain types;
		-this : limits matcing to join points where bean  reference(Spring AOP proxy)is an instance of the given type;
		-target: limits matching to join points where the target object(applicatioin object being proxied) is an instance of the given type;
		-args： limits matching to join points where the arguments are instances of the given types;
		-@target： limits matching to join points where the class of the executing object has an annotation of the given type;
		-@args: limits matching to join points where the runtime type of the actual arguments passed have annotations of the given types;
		-@within: limits matching to join points within types that  have the given annotation;
		-@annotation : limits matching to join points where the subject of the jion point has the given annotation;
	For JDK proxies, only public interface method calls on the proxy can be intercepted. 
		With CGLIB, public and protected method calls on the proxy will be intercepted, and even package-visible methods if necessary.
Combining poincut expressions:
	Pointcut expressions can be combined using '&&','||',and '!'.
	When referring to pointcuts by name,normal  Java visibility rules apply(you can see private pointcuts in the same type,protected pointcuts in
		the hierarchy,public pointcuts anywhere and so on). Visibility does not affect pointcut matching.
Format of an execution expression:
	execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)
            throws-pattern?)
	(注解： The parameters pattern is slightly more complex: () matches a method that takes no parameters, whereas (..) matches any number of parameters (zero or more). The pattern (*) matches a method taking one parameter of any type, (*,String) matches a method taking two parameters, the first can be of any type, the second must be a String. ）
	